// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/cron/codec.proto

package cron

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_iov_one_weave "github.com/iov-one/weave"
	weave "github.com/iov-one/weave"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// TaskResult is a publicly available information about task execution result.
// It is only created for those tasks that were executed.
//
// Due to a bug in tendermint we must store this information ourselves instead
// of relying on the usual search via tag.
// https://github.com/tendermint/tendermint/issues/3665
type TaskResult struct {
	Metadata *weave.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Successful is set to true if the task was successfully executed.
	Successful bool `protobuf:"varint,2,opt,name=successful,proto3" json:"successful,omitempty"`
	// Info contains any additinal information that might be useful to lean more
	// about the task execution.
	Info string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	// Exec time hold the information of when the task was executed.
	ExecTime github_com_iov_one_weave.UnixTime `protobuf:"varint,4,opt,name=exec_time,json=execTime,proto3,casttype=github.com/iov-one/weave.UnixTime" json:"exec_time,omitempty"`
	// Exec height holds the block height value at the time the task was executed.
	ExecHeight int64 `protobuf:"varint,5,opt,name=exec_height,json=execHeight,proto3" json:"exec_height,omitempty"`
}

func (m *TaskResult) Reset()         { *m = TaskResult{} }
func (m *TaskResult) String() string { return proto.CompactTextString(m) }
func (*TaskResult) ProtoMessage()    {}
func (*TaskResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed99bc993a5d5798, []int{0}
}
func (m *TaskResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskResult.Merge(m, src)
}
func (m *TaskResult) XXX_Size() int {
	return m.Size()
}
func (m *TaskResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskResult.DiscardUnknown(m)
}

var xxx_messageInfo_TaskResult proto.InternalMessageInfo

func (m *TaskResult) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TaskResult) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *TaskResult) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *TaskResult) GetExecTime() github_com_iov_one_weave.UnixTime {
	if m != nil {
		return m.ExecTime
	}
	return 0
}

func (m *TaskResult) GetExecHeight() int64 {
	if m != nil {
		return m.ExecHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*TaskResult)(nil), "cron.TaskResult")
}

func init() { proto.RegisterFile("x/cron/codec.proto", fileDescriptor_ed99bc993a5d5798) }

var fileDescriptor_ed99bc993a5d5798 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xcf, 0x41, 0x4b, 0xfb, 0x30,
	0x18, 0xc7, 0xf1, 0xe6, 0xbf, 0xfe, 0xa5, 0x7b, 0x7a, 0x10, 0x82, 0x87, 0xb0, 0x43, 0x56, 0x05,
	0xa1, 0x20, 0xb6, 0xa0, 0xef, 0xa0, 0x27, 0x2f, 0x5e, 0xc2, 0x3c, 0x4b, 0x97, 0x3d, 0x6b, 0x83,
	0x6b, 0x1f, 0x59, 0xd3, 0xd9, 0x97, 0xe1, 0xcb, 0xf2, 0x38, 0x3c, 0x79, 0x12, 0x69, 0xdf, 0x85,
	0x27, 0x49, 0x27, 0xb2, 0xdb, 0x97, 0x0f, 0xc9, 0x2f, 0x04, 0x78, 0x97, 0xea, 0x2d, 0xd5, 0xa9,
	0xa6, 0x15, 0xea, 0xe4, 0x79, 0x4b, 0x96, 0xb8, 0xef, 0x64, 0x16, 0x1e, 0xd1, 0xec, 0xac, 0xa0,
	0x82, 0xc6, 0x4c, 0x5d, 0x1d, 0xf4, 0xe2, 0x9d, 0x01, 0x2c, 0xf2, 0xe6, 0x49, 0x61, 0xd3, 0x6e,
	0x2c, 0xbf, 0x82, 0xa0, 0x42, 0x9b, 0xaf, 0x72, 0x9b, 0x0b, 0x16, 0xb1, 0x38, 0xbc, 0x39, 0x4d,
	0x5e, 0x30, 0xdf, 0x61, 0x72, 0xff, 0xcb, 0xea, 0xef, 0x00, 0x97, 0x00, 0x4d, 0xab, 0x35, 0x36,
	0xcd, 0xba, 0xdd, 0x88, 0x7f, 0x11, 0x8b, 0x03, 0x75, 0x24, 0x9c, 0x83, 0x6f, 0xea, 0x35, 0x89,
	0x49, 0xc4, 0xe2, 0xa9, 0x1a, 0x9b, 0x67, 0x30, 0xc5, 0x0e, 0xf5, 0xa3, 0x35, 0x15, 0x0a, 0x3f,
	0x62, 0xf1, 0x24, 0xbb, 0xfc, 0xfe, 0x9c, 0x9f, 0x17, 0xc6, 0x96, 0xed, 0x32, 0xd1, 0x54, 0xa5,
	0x86, 0x76, 0xd7, 0x54, 0x63, 0x7a, 0x78, 0xf7, 0xa1, 0x36, 0xdd, 0xc2, 0x54, 0xa8, 0x02, 0x77,
	0xcf, 0x15, 0x9f, 0x43, 0x38, 0x6e, 0x94, 0x68, 0x8a, 0xd2, 0x8a, 0xff, 0x6e, 0x45, 0x81, 0xa3,
	0xbb, 0x51, 0x32, 0xf1, 0xd6, 0x4b, 0xb6, 0xef, 0x25, 0xfb, 0xea, 0x25, 0x7b, 0x1d, 0xa4, 0xb7,
	0x1f, 0xa4, 0xf7, 0x31, 0x48, 0x6f, 0x79, 0x32, 0xfe, 0xfa, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x76, 0x03, 0x46, 0xbc, 0x34, 0x01, 0x00, 0x00,
}

func (m *TaskResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n1, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Successful {
		dAtA[i] = 0x10
		i++
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Info) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Info)))
		i += copy(dAtA[i:], m.Info)
	}
	if m.ExecTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ExecTime))
	}
	if m.ExecHeight != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ExecHeight))
	}
	return i, nil
}

func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TaskResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.Successful {
		n += 2
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.ExecTime != 0 {
		n += 1 + sovCodec(uint64(m.ExecTime))
	}
	if m.ExecHeight != 0 {
		n += 1 + sovCodec(uint64(m.ExecHeight))
	}
	return n
}

func sovCodec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecTime", wireType)
			}
			m.ExecTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecTime |= github_com_iov_one_weave.UnixTime(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecHeight", wireType)
			}
			m.ExecHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCodec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCodec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCodec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCodec
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCodec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec   = fmt.Errorf("proto: integer overflow")
)
